{
  
    
        "post0": {
            "title": "Forecasting",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns . x = np.linspace(0,50,501) y = np.sin(x) . plt.plot(x,y) . [&lt;matplotlib.lines.Line2D at 0x28c58900610&gt;] . np.sin(20) . 0.9129452507276277 . np.sin(10) . -0.5440211108893698 . df = pd.DataFrame(data=y,index=x,columns=[&#39;Sine&#39;]) . df . Sine . 0.0 0.000000 | . 0.1 0.099833 | . 0.2 0.198669 | . 0.3 0.295520 | . 0.4 0.389418 | . ... ... | . 49.6 -0.617439 | . 49.7 -0.535823 | . 49.8 -0.448854 | . 49.9 -0.357400 | . 50.0 -0.262375 | . 501 rows × 1 columns . 0.1*len(df) . 50.1 . train = df.iloc[:451] test = df.iloc[451:] . train . Sine . 0.0 0.000000 | . 0.1 0.099833 | . 0.2 0.198669 | . 0.3 0.295520 | . 0.4 0.389418 | . ... ... | . 44.6 0.579164 | . 44.7 0.657656 | . 44.8 0.729577 | . 44.9 0.794208 | . 45.0 0.850904 | . 451 rows × 1 columns . test.head() . Sine . 45.1 0.899097 | . 45.2 0.938307 | . 45.3 0.968142 | . 45.4 0.988304 | . 45.5 0.998591 | . from sklearn.preprocessing import MinMaxScaler scaler = MinMaxScaler() scaled_train = scaler.fit_transform(train) scaled_test = scaler.transform(test) . from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator . df.iloc[121] . Sine -0.449647 Name: 12.100000000000001, dtype: float64 . length = 120 n_features=1 . generator = TimeseriesGenerator(data=scaled_train,targets=scaled_train,length=length, batch_size=1) #validation_generator = TimeseriesGenerator(data=scaled_test,targets=scaled_test,length=length,batch_size=1) . generator[0] . (array([[[4.99999116e-01], [5.49916225e-01], [5.99334579e-01], [6.47760405e-01], [6.94709850e-01], [7.39713809e-01], [7.82322618e-01], [8.22110545e-01], [8.58680040e-01], [8.91665714e-01], [9.20737985e-01], [9.45606372e-01], [9.66022399e-01], [9.81782075e-01], [9.92727935e-01], [9.98750612e-01], [9.99789928e-01], [9.95835500e-01], [9.86926839e-01], [9.73152957e-01], [9.54651478e-01], [9.31607263e-01], [9.04250562e-01], [8.72854714e-01], [8.37733417e-01], [7.99237589e-01], [7.57751870e-01], [7.13690771e-01], [6.67494535e-01], [6.19624741e-01], [5.70559686e-01], [5.20789614e-01], [4.70811810e-01], [4.21125636e-01], [3.72227539e-01], [3.24606094e-01], [2.78737119e-01], [2.35078919e-01], [1.94067715e-01], [1.56113277e-01], [1.21594831e-01], [9.08572769e-02], [6.42077324e-02], [4.19124713e-02], [2.41942605e-02], [1.12301346e-02], [3.14962674e-03], [3.34747619e-05], [1.91281421e-03], [8.76886734e-03], [2.05331307e-02], [3.70880598e-02], [5.82682430e-02], [8.38620552e-02], [1.13613771e-01], [1.47226122e-01], [1.84363264e-01], [2.24654135e-01], [2.67696162e-01], [3.13059283e-01], [3.60290246e-01], [4.08917133e-01], [4.58454081e-01], [5.08406134e-01], [5.58274186e-01], [6.07559973e-01], [6.55771048e-01], [7.02425701e-01], [7.47057774e-01], [7.89221319e-01], [8.28495052e-01], [8.64486561e-01], [8.96836233e-01], [9.25220839e-01], [9.49356770e-01], [9.69002868e-01], [9.83962836e-01], [9.94087198e-01], [9.99274795e-01], [9.99473795e-01], [9.94682209e-01], [9.84947913e-01], [9.70368169e-01], [9.51088653e-01], [9.27301999e-01], [8.99245876e-01], [8.67200612e-01], [8.31486391e-01], [7.92460059e-01], [7.50511555e-01], [7.06060012e-01], [6.59549578e-01], [6.11444967e-01], [5.62226827e-01], [5.12386928e-01], [4.62423254e-01], [4.12835026e-01], [3.64117712e-01], [3.16758081e-01], [2.71229333e-01], [2.27986377e-01], [1.87461283e-01], [1.50058964e-01], [1.16153131e-01], [8.60825596e-02], [6.01477060e-02], [3.86077023e-02], [2.16777691e-02], [9.52706470e-03], [2.27699490e-03], [0.00000000e+00], [2.71883099e-03], [1.04063222e-02], [2.29856628e-02], [4.03311641e-02], [6.22695157e-02], [8.85815167e-02], [1.19004266e-01], [1.53233791e-01], [1.90928079e-01]]]), array([[0.2317105]])) . generator[1] . (array([[[5.49916225e-01], [5.99334579e-01], [6.47760405e-01], [6.94709850e-01], [7.39713809e-01], [7.82322618e-01], [8.22110545e-01], [8.58680040e-01], [8.91665714e-01], [9.20737985e-01], [9.45606372e-01], [9.66022399e-01], [9.81782075e-01], [9.92727935e-01], [9.98750612e-01], [9.99789928e-01], [9.95835500e-01], [9.86926839e-01], [9.73152957e-01], [9.54651478e-01], [9.31607263e-01], [9.04250562e-01], [8.72854714e-01], [8.37733417e-01], [7.99237589e-01], [7.57751870e-01], [7.13690771e-01], [6.67494535e-01], [6.19624741e-01], [5.70559686e-01], [5.20789614e-01], [4.70811810e-01], [4.21125636e-01], [3.72227539e-01], [3.24606094e-01], [2.78737119e-01], [2.35078919e-01], [1.94067715e-01], [1.56113277e-01], [1.21594831e-01], [9.08572769e-02], [6.42077324e-02], [4.19124713e-02], [2.41942605e-02], [1.12301346e-02], [3.14962674e-03], [3.34747619e-05], [1.91281421e-03], [8.76886734e-03], [2.05331307e-02], [3.70880598e-02], [5.82682430e-02], [8.38620552e-02], [1.13613771e-01], [1.47226122e-01], [1.84363264e-01], [2.24654135e-01], [2.67696162e-01], [3.13059283e-01], [3.60290246e-01], [4.08917133e-01], [4.58454081e-01], [5.08406134e-01], [5.58274186e-01], [6.07559973e-01], [6.55771048e-01], [7.02425701e-01], [7.47057774e-01], [7.89221319e-01], [8.28495052e-01], [8.64486561e-01], [8.96836233e-01], [9.25220839e-01], [9.49356770e-01], [9.69002868e-01], [9.83962836e-01], [9.94087198e-01], [9.99274795e-01], [9.99473795e-01], [9.94682209e-01], [9.84947913e-01], [9.70368169e-01], [9.51088653e-01], [9.27301999e-01], [8.99245876e-01], [8.67200612e-01], [8.31486391e-01], [7.92460059e-01], [7.50511555e-01], [7.06060012e-01], [6.59549578e-01], [6.11444967e-01], [5.62226827e-01], [5.12386928e-01], [4.62423254e-01], [4.12835026e-01], [3.64117712e-01], [3.16758081e-01], [2.71229333e-01], [2.27986377e-01], [1.87461283e-01], [1.50058964e-01], [1.16153131e-01], [8.60825596e-02], [6.01477060e-02], [3.86077023e-02], [2.16777691e-02], [9.52706470e-03], [2.27699490e-03], [0.00000000e+00], [2.71883099e-03], [1.04063222e-02], [2.29856628e-02], [4.03311641e-02], [6.22695157e-02], [8.85815167e-02], [1.19004266e-01], [1.53233791e-01], [1.90928079e-01], [2.31710504e-01]]]), array([[0.27517358]])) . . from tensorflow.keras.models import Sequential from tensorflow.keras.layers import SimpleRNN,Dense from tensorflow.keras.callbacks import EarlyStopping . early_stop = EarlyStopping(patience=3) . model = Sequential() model.add(SimpleRNN(120,input_shape=(length,n_features))) model.add(Dense(1)) model.compile(optimizer=&#39;adam&#39;,loss=&#39;mse&#39;) . model.summary() . Model: &#34;sequential&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= simple_rnn (SimpleRNN) (None, 120) 14640 dense (Dense) (None, 1) 121 ================================================================= Total params: 14,761 Trainable params: 14,761 Non-trainable params: 0 _________________________________________________________________ . model.fit(generator, epochs=8, callbacks=[early_stop]) . Epoch 1/8 331/331 [==============================] - ETA: 0s - loss: 0.0200WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 23s 64ms/step - loss: 0.0200 Epoch 2/8 331/331 [==============================] - ETA: 0s - loss: 1.6233e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 16s 47ms/step - loss: 1.6233e-04 Epoch 3/8 330/331 [============================&gt;.] - ETA: 0s - loss: 2.7074e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 22s 66ms/step - loss: 2.7022e-04 Epoch 4/8 331/331 [==============================] - ETA: 0s - loss: 2.4963e-05WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 19s 58ms/step - loss: 2.4963e-05 Epoch 5/8 331/331 [==============================] - ETA: 0s - loss: 2.6041e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 19s 57ms/step - loss: 2.6041e-04 Epoch 6/8 330/331 [============================&gt;.] - ETA: 0s - loss: 4.8643e-05WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 20s 61ms/step - loss: 4.8738e-05 Epoch 7/8 331/331 [==============================] - ETA: 0s - loss: 7.7858e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 20s 60ms/step - loss: 7.7858e-04 Epoch 8/8 330/331 [============================&gt;.] - ETA: 0s - loss: 3.6574e-05WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss 331/331 [==============================] - 22s 66ms/step - loss: 3.6463e-05 . &lt;keras.callbacks.History at 0x28c65e58eb0&gt; . . first_batch = scaled_train[-length:] . first_batch.shape . (120, 1) . first_batch = first_batch.reshape((1,length,n_features)) . model.predict(first_batch) . array([[0.94244504]], dtype=float32) . scaled_test[0] . array([0.94955134]) . test_pred = [] first_batch = scaled_train[-length:] current_batch = first_batch.reshape((1,length,n_features)) for i in range(len(test)): current_pred = model.predict(current_batch)[0] test_pred.append(current_pred) current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1) . test_pred . [array([0.94244504], dtype=float32), array([0.96065754], dtype=float32), array([0.9708565], dtype=float32), array([0.9759453], dtype=float32), array([0.9759412], dtype=float32), array([0.968616], dtype=float32), array([0.9598087], dtype=float32), array([0.9422044], dtype=float32), array([0.9228914], dtype=float32), array([0.8990488], dtype=float32), array([0.86964476], dtype=float32), array([0.83964616], dtype=float32), array([0.80343795], dtype=float32), array([0.7667606], dtype=float32), array([0.72737294], dtype=float32), array([0.6854251], dtype=float32), array([0.64312], dtype=float32), array([0.5971157], dtype=float32), array([0.5529729], dtype=float32), array([0.5068138], dtype=float32), array([0.46035877], dtype=float32), array([0.41565594], dtype=float32), array([0.3696072], dtype=float32), array([0.3265451], dtype=float32), array([0.2838479], dtype=float32), array([0.24302198], dtype=float32), array([0.20535764], dtype=float32), array([0.16879135], dtype=float32), array([0.13595112], dtype=float32), array([0.10627475], dtype=float32), array([0.07967791], dtype=float32), array([0.05813602], dtype=float32), array([0.03864183], dtype=float32), array([0.02434738], dtype=float32), array([0.01505384], dtype=float32), array([0.00841999], dtype=float32), array([0.008547], dtype=float32), array([0.01105369], dtype=float32), array([0.01954301], dtype=float32), array([0.03256221], dtype=float32), array([0.04856822], dtype=float32), array([0.07148007], dtype=float32), array([0.09618616], dtype=float32), array([0.12626879], dtype=float32), array([0.16033354], dtype=float32), array([0.19575122], dtype=float32), array([0.23764205], dtype=float32), array([0.2794886], dtype=float32), array([0.32533035], dtype=float32), array([0.3733752], dtype=float32)] . predictions = scaler.inverse_transform(test_pred) . test[&#39;Prediction&#39;] = predictions . C: Users HP AppData Local Temp ipykernel_10224 2447167120.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy test[&#39;Prediction&#39;] = predictions . test . Sine Prediction . 45.1 0.899097 | 0.884885 | . 45.2 0.938307 | 0.921309 | . 45.3 0.968142 | 0.941707 | . 45.4 0.988304 | 0.951885 | . 45.5 0.998591 | 0.951876 | . 45.6 0.998900 | 0.937226 | . 45.7 0.989229 | 0.919612 | . 45.8 0.969673 | 0.884404 | . 45.9 0.940429 | 0.845778 | . 46.0 0.901788 | 0.798093 | . 46.1 0.854137 | 0.739285 | . 46.2 0.797952 | 0.679289 | . 46.3 0.733794 | 0.606873 | . 46.4 0.662304 | 0.533519 | . 46.5 0.584197 | 0.454744 | . 46.6 0.500252 | 0.370849 | . 46.7 0.411309 | 0.286239 | . 46.8 0.318257 | 0.194232 | . 46.9 0.222024 | 0.105947 | . 47.0 0.123573 | 0.013629 | . 47.1 0.023888 | -0.079280 | . 47.2 -0.076037 | -0.168685 | . 47.3 -0.175201 | -0.260782 | . 47.4 -0.272615 | -0.346905 | . 47.5 -0.367305 | -0.432299 | . 47.6 -0.458325 | -0.513950 | . 47.7 -0.544766 | -0.589278 | . 47.8 -0.625764 | -0.662410 | . 47.9 -0.700509 | -0.728090 | . 48.0 -0.768255 | -0.787442 | . 48.1 -0.828324 | -0.840636 | . 48.2 -0.880118 | -0.883719 | . 48.3 -0.923117 | -0.922707 | . 48.4 -0.956893 | -0.951296 | . 48.5 -0.981108 | -0.969883 | . 48.6 -0.995521 | -0.983150 | . 48.7 -0.999986 | -0.982896 | . 48.8 -0.994460 | -0.977883 | . 48.9 -0.978997 | -0.960905 | . 49.0 -0.953753 | -0.934866 | . 49.1 -0.918979 | -0.902855 | . 49.2 -0.875023 | -0.857031 | . 49.3 -0.822324 | -0.807619 | . 49.4 -0.761408 | -0.747455 | . 49.5 -0.692885 | -0.679326 | . 49.6 -0.617439 | -0.608491 | . 49.7 -0.535823 | -0.524710 | . 49.8 -0.448854 | -0.441018 | . 49.9 -0.357400 | -0.349335 | . 50.0 -0.262375 | -0.253246 | . test.plot() . &lt;AxesSubplot:&gt; . from tensorflow.keras.layers import LSTM . model = Sequential() model.add(LSTM(120,input_shape=(length,n_features))) model.add(Dense(1)) model.compile(optimizer=&#39;adam&#39;,loss=&#39;mse&#39;) . model.fit(generator,epochs = 8) . Epoch 1/8 331/331 [==============================] - 42s 108ms/step - loss: 0.0089 Epoch 2/8 331/331 [==============================] - 34s 102ms/step - loss: 3.4341e-04 Epoch 3/8 331/331 [==============================] - 35s 106ms/step - loss: 0.0011 Epoch 4/8 331/331 [==============================] - 35s 104ms/step - loss: 3.4742e-05 Epoch 5/8 331/331 [==============================] - 33s 99ms/step - loss: 2.9824e-05 Epoch 6/8 331/331 [==============================] - 34s 103ms/step - loss: 9.9828e-05 Epoch 7/8 331/331 [==============================] - 36s 108ms/step - loss: 1.5790e-04 Epoch 8/8 331/331 [==============================] - 33s 98ms/step - loss: 2.3372e-04 . &lt;keras.callbacks.History at 0x28c69560be0&gt; . test_pred = [] first_batch = scaled_train[-length:] current_batch = first_batch.reshape((1,length,n_features)) for i in range(len(test)): current_pred = model.predict(current_batch)[0] test_pred.append(current_pred) current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1) . predictions = scaler.inverse_transform(test_pred) . test[&#39;LSTM Pred&#39;] = predictions . C: Users HP AppData Local Temp ipykernel_10224 3796240138.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy test[&#39;LSTM Pred&#39;] = predictions . test . Sine Prediction LSTM Pred . 45.1 0.899097 | 0.884885 | 0.887886 | . 45.2 0.938307 | 0.921309 | 0.921686 | . 45.3 0.968142 | 0.941707 | 0.944550 | . 45.4 0.988304 | 0.951885 | 0.956048 | . 45.5 0.998591 | 0.951876 | 0.955870 | . 45.6 0.998900 | 0.937226 | 0.943850 | . 45.7 0.989229 | 0.919612 | 0.919976 | . 45.8 0.969673 | 0.884404 | 0.884386 | . 45.9 0.940429 | 0.845778 | 0.837367 | . 46.0 0.901788 | 0.798093 | 0.779366 | . 46.1 0.854137 | 0.739285 | 0.710975 | . 46.2 0.797952 | 0.679289 | 0.632941 | . 46.3 0.733794 | 0.606873 | 0.546155 | . 46.4 0.662304 | 0.533519 | 0.451657 | . 46.5 0.584197 | 0.454744 | 0.350617 | . 46.6 0.500252 | 0.370849 | 0.244343 | . 46.7 0.411309 | 0.286239 | 0.134251 | . 46.8 0.318257 | 0.194232 | 0.021859 | . 46.9 0.222024 | 0.105947 | -0.091242 | . 47.0 0.123573 | 0.013629 | -0.203411 | . 47.1 0.023888 | -0.079280 | -0.312994 | . 47.2 -0.076037 | -0.168685 | -0.418354 | . 47.3 -0.175201 | -0.260782 | -0.517907 | . 47.4 -0.272615 | -0.346905 | -0.610160 | . 47.5 -0.367305 | -0.432299 | -0.693738 | . 47.6 -0.458325 | -0.513950 | -0.767415 | . 47.7 -0.544766 | -0.589278 | -0.830133 | . 47.8 -0.625764 | -0.662410 | -0.881019 | . 47.9 -0.700509 | -0.728090 | -0.919391 | . 48.0 -0.768255 | -0.787442 | -0.944764 | . 48.1 -0.828324 | -0.840636 | -0.956846 | . 48.2 -0.880118 | -0.883719 | -0.955531 | . 48.3 -0.923117 | -0.922707 | -0.940892 | . 48.4 -0.956893 | -0.951296 | -0.913172 | . 48.5 -0.981108 | -0.969883 | -0.872768 | . 48.6 -0.995521 | -0.983150 | -0.820221 | . 48.7 -0.999986 | -0.982896 | -0.756207 | . 48.8 -0.994460 | -0.977883 | -0.681519 | . 48.9 -0.978997 | -0.960905 | -0.597063 | . 49.0 -0.953753 | -0.934866 | -0.503844 | . 49.1 -0.918979 | -0.902855 | -0.402959 | . 49.2 -0.875023 | -0.857031 | -0.295585 | . 49.3 -0.822324 | -0.807619 | -0.182974 | . 49.4 -0.761408 | -0.747455 | -0.066445 | . 49.5 -0.692885 | -0.679326 | 0.052627 | . 49.6 -0.617439 | -0.608491 | 0.172818 | . 49.7 -0.535823 | -0.524710 | 0.292665 | . 49.8 -0.448854 | -0.441018 | 0.410678 | . 49.9 -0.357400 | -0.349335 | 0.525357 | . 50.0 -0.262375 | -0.253246 | 0.635203 | . test.plot() . &lt;AxesSubplot:&gt; . Since the sequence of the data is not long, RNN has performed better. However for Data having lengthy Sequence, use of LSTM would be an optimal choice. . full_scaler = MinMaxScaler() scaled_data = full_scaler.fit_transform(df) . length = 120 n_features = 1 . generator = TimeseriesGenerator(data=scaled_data,targets=scaled_data,length=length,batch_size=1) . model = Sequential() model.add(SimpleRNN(120,input_shape=(length,n_features))) model.add(Dense(1)) model.compile(optimizer=&#39;adam&#39;, loss=&#39;mse&#39;) . model.fit(generator,epochs=8) . Epoch 1/8 381/381 [==============================] - 26s 66ms/step - loss: 0.0145 Epoch 2/8 381/381 [==============================] - 24s 63ms/step - loss: 1.2179e-04 Epoch 3/8 381/381 [==============================] - 24s 64ms/step - loss: 4.5159e-04 Epoch 4/8 381/381 [==============================] - 22s 57ms/step - loss: 8.7849e-05 Epoch 5/8 381/381 [==============================] - 23s 60ms/step - loss: 2.9346e-04 Epoch 6/8 381/381 [==============================] - 23s 61ms/step - loss: 3.2302e-05 Epoch 7/8 381/381 [==============================] - 22s 56ms/step - loss: 4.0880e-05 Epoch 8/8 381/381 [==============================] - 21s 56ms/step - loss: 0.1904 . &lt;keras.callbacks.History at 0x28c694883d0&gt; . forecast = [] first_batch = scaled_data[-length:] current_batch = first_batch.reshape((1,length,n_features)) for i in range(len(test)): current_pred = model.predict(current_batch)[0] forecast.append(current_pred) current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1) . forecast = full_scaler.inverse_transform(forecast) . len(forecast) . 50 . forecast_index = np.arange(50.1,55.1,0.1) . plt.plot(df.index,df[&#39;Sine&#39;]) plt.plot(forecast_index,forecast) . [&lt;matplotlib.lines.Line2D at 0x28c6c69f3d0&gt;] . model = Sequential() model.add(LSTM(120,input_shape=(length,n_features))) model.add(Dense(1)) model.compile(optimizer=&#39;adam&#39;, loss=&#39;mse&#39;) . model.fit(generator,epochs=8) . Epoch 1/8 381/381 [==============================] - 46s 105ms/step - loss: 0.0072 Epoch 2/8 381/381 [==============================] - 37s 97ms/step - loss: 8.2978e-05 Epoch 3/8 381/381 [==============================] - 36s 94ms/step - loss: 1.3210e-04 Epoch 4/8 381/381 [==============================] - 39s 101ms/step - loss: 1.2435e-04 Epoch 5/8 381/381 [==============================] - 37s 98ms/step - loss: 3.9972e-04 Epoch 6/8 381/381 [==============================] - 36s 94ms/step - loss: 1.0334e-04 Epoch 7/8 381/381 [==============================] - 36s 93ms/step - loss: 1.2885e-04 Epoch 8/8 381/381 [==============================] - 36s 94ms/step - loss: 1.0886e-05 . &lt;keras.callbacks.History at 0x28c6d79a6a0&gt; . forecast = [] first_batch = scaled_data[-length:] current_batch = first_batch.reshape((1,length,n_features)) for i in range(len(test)): current_pred = model.predict(current_batch)[0] forecast.append(current_pred) current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1) . plt.plot(df.index,df[&#39;Sine&#39;]) plt.plot(forecast_index,forecast) . [&lt;matplotlib.lines.Line2D at 0x28c70effe20&gt;] . This shows that for data with large sequence LSTM is an optimal choice, however we can improve the model performance by increasing the number of epochs which currently has been trained at 8 epochs. .",
            "url": "https://bilalkhan18.github.io/port/2022/09/14/Sine-Wave.html",
            "relUrl": "/2022/09/14/Sine-Wave.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bilalkhan18.github.io/port/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bilalkhan18.github.io/port/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Bilal Khan. I’m currently pursuing Engineering in Artificial Intelligence and Machine Learning (3rd year). Machine Learning has been exciting and this page reflects projects which are a result of self-learning. I strongly believe that artificial intelligence is a revolution and i’m keen in contributing to a better world through AI. Cheers. .",
          "url": "https://bilalkhan18.github.io/port/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bilalkhan18.github.io/port/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}